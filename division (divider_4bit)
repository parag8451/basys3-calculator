`timescale 1ns / 1ps

module div4bit(
    input [3:0] a,   // Dividend
    input [3:0] b,   // Divisor
    output [3:0] q   // Quotient
);

    wire [3:0] s0, s1, s2, s3;
    wire c0, c1, c2, c3;
    wire [3:0] b_shift3 = b << 3;
    wire [3:0] b_shift2 = b << 2;
    wire [3:0] b_shift1 = b << 1;

    // Step 1: Compare a >= b << 3
    assign c3 = (a >= b_shift3);
    assign s3 = a - (c3 ? b_shift3 : 4'd0);

    // Step 2: Compare s3 >= b << 2
    assign c2 = (s3 >= b_shift2);
    assign s2 = s3 - (c2 ? b_shift2 : 4'd0);

    // Step 3: Compare s2 >= b << 1
    assign c1 = (s2 >= b_shift1);
    assign s1 = s2 - (c1 ? b_shift1 : 4'd0);

    // Step 4: Compare s1 >= b
    assign c0 = (s1 >= b);
    assign s0 = s1 - (c0 ? b : 4'd0);

    // Final Quotient
    assign q = {c3, c2, c1, c0};

endmodule
